// Init libs
var ROSLIB = require('roslib');
var Helpers = require('../helpers');
// Solidity message definition
var bytecode = '60606040818152806066833960a09052516080516000918255600155603e908190602890396000f3606060405260e060020a60003504634fd7d76a81146024578063589af69c14602c575b005b603460005481565b603460015481565b6060908152602090f3'; 
var abi = [{"constant":true,"inputs":[],"name":"latitude","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[],"name":"longitude","outputs":[{"name":"","type":"int256"}],"type":"function"},{"inputs":[{"name":"_latitude","type":"int256"},{"name":"_longitude","type":"int256"}],"type":"constructor"}];
// JSON message converter
function eth2json(address, web3) {
    var msg = Helpers.getContract(abi, address, web3);
    return {
        // Message fields START
        latitude: parseInt(msg.latitude()) / 1000000.0,
        longitude: parseInt(msg.longitude()) / 1000000.0
        // Message fields END
    };
}
// Setup exports
module.exports = {
/*
 * This message converter should be autogenerated from
 * ROS message definition language.
 * TODO: converter implementation.
 */
    abi: abi,
    eth2json: eth2json,
    eth2ros: function(address, web3) {return new ROSLIB.Message(eth2json(address, web3))},
    ros2eth: function(msg, web3, fun) {
    var latitude = int(msg.latitude * 1000000);
    var longitude = int(msg.longitude * 1000000);
    var args = [latitude, longitude];
    Helpers.newContract(abi, bytecode, web3, args, fun);
}
}
