// Init libs
var ROSLIB = require('roslib');
var Helpers = require('../helpers');
var SatFix = require('../small_atc_msgs/SatFix');
// Solidity message definition
var bytecode = '606060405260405161016f38038061016f83398101604052805160805191019060605182516000805482825581805290927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563918201929190608001821560bc579160200282015b8281111560bc5782518254600160a060020a03191617825560209290920191600191909101906066565b505080600160006101000a81548163ffffffff021916908302179055505050608c806100e36000396000f35b5060909291505b8082111560df578054600160a060020a031916815560010160c3565b509056606060405260e060020a6000350463af640d0f81146024578063b8a24252146032575b005b608260015463ffffffff1681565b60826004356000805482908110156002575080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563015473ffffffffffffffffffffffffffffffffffffffff1681565b6060908152602090f3';
var abi = [{"constant":true,"inputs":[],"name":"id","outputs":[{"name":"","type":"uint32"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"checkpoints","outputs":[{"name":"","type":"address"}],"type":"function"},{"inputs":[{"name":"_checkpoints","type":"address[]"},{"name":"_id","type":"uint32"}],"type":"constructor"}];
// JSON message converter
function eth2json(address, web3) {
    var msg = Helpers.getContract(abi, address, web3);
    var route = [];
    var ix = 0;
    while (msg.checkpoints(ix) != "0x")
        route.push(SatFix.eth2json(msg.checkpoints(ix++), web3));
    return {
        // Message fields START
        id: parseInt(msg.id()),
        checkpoints: route
        // Message fields END
    }
}
function mkArray(arr, obj, web3, fn) {
    var count = 0;
    arr.forEach(function(e, i, a) {
        obj.ros2eth(e, web3, function(err, r) {
            arr[i] = r;
            ++count;
        });
    });
    while (count != arr.length);
    return arr;
}
// Setup exports
module.exports = {
/*
 * This message converter should be autogenerated from
 * ROS message definition language.
 * TODO: converter implementation.
 */
    abi: abi,
    eth2json: eth2json,
    eth2ros: function(msg, web3) {return new ROSLIB.Message(eth2json(msg, web3))},
    ros2eth: function(msg, web3, fun) {
        var id = msg.id;

        mkArray(msg.checkpoints, SatFix, web3, function(checkpoints) {
            var args = [id, checkpoints];
            Helpers.newContract(abi, bytecode, web3, args, fun);
        });
    }
}
