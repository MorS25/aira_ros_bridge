@###############################################
@#
@# ROS message source code gen for Solidity
@#
@# EmPy template for generating <msg>.sol files
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - file_name_in (String) Source file
@#  - spec (msggen.MsgSpec) Parsed specification of the .msg file
@#  - md5sum (String) MD5Sum of the .msg specification
@###############################################
// Generated by gensol from file @(spec.package)/@(spec.short_name).msg
// DO NOT EDIT!

@{
import genmsg.msgs
import gensol
}@

@##############################
@# Generic Includes
@##############################
import 'ROS';
@##############################
@# Includes for dependencies
@##############################
@{
for field in spec.parsed_fields():
  if (not field.is_builtin):
    if (field.is_header):
      print('import \'std_msgs_Header\'')
    else:
      (package, name) = genmsg.names.package_resource_name(field.base_type)
      package = package or spec.package # convert '' to package
      print('import \'%s_%s\''%(package, name))
}@

contract @(spec.short_name) is Message {
  /*** Message fields ***/
@[for field in spec.parsed_fields()]
  @(gensol.msg_type_to_sol(field.type)) public @(field.name);
@[end for]

  /*** Constants ***/
@[for constant in spec.constants]@
  @(gensol.msg_type_to_sol(constant.type)) constant @(constant.name);
@[end for]

  /*** Constructor ***/
  function @(spec.short_name) (
@[for field in spec.parsed_fields()]
        @(gensol.msg_type_to_sol(field.type)) _@(field.name),
@[end for]
    ) {
@[for field in spec.parsed_fields()]
    @(field.name) = _@(field.name);
@[end for]
  }
}
